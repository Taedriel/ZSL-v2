from imports import *

class ImageGenerator(tf.keras.utils.Sequence):
    """
    Load and read a dataset (load images and encode labels) 
    
    Attributes
    ----------
    embedding_csv :
        A csv file containing the word embedding of the labels.
    filenames :
        The path of images
    labels :
        The labels of images
    classes_size : 
        The size of the word embeddings
    batch_size 
    image_size
    shuffle :
        Shuffle or not the batch of data (default=True)
    """
    def __init__(self, embeddings_csv : pd.DataFrame, filenames : List[str], labels : List[str], classes_size : int, batch_size : int, image_size=(224, 224), shuffle=True):
        self.embeddings_df = pd.read_csv(embeddings_csv)
        self.image_size, self.batch_size = image_size, batch_size
        self.items, self.items_size = filenames, len(filenames)
        self.labels = labels
        self.classes_size = classes_size
        self.indexes = np.arange(self.items_size)
        self.shuffle = shuffle
        self.on_epoch_end()
    
    def encode_label(self, label : str) -> np.ndarray:
        """
        Returns the word embedding of the label given in the parameter
        """
        return self.embeddings_df[self.embeddings_df['embeddings'].str.lower() == label][:].to_numpy().T[1:].T
    
    def load_urls(self, indexes : np.ndarray) -> Tuple[np.ndarray, np.ndarray]:
        """
        Load and read the images, and encode the labels
        """
        images = np.zeros((self.batch_size, self.image_size[0], self.image_size[1], 3), dtype=np.float32)
        labels = np.zeros((self.batch_size, self.classes_size), dtype=np.float32)
        
        urls = [self.items[k] for k in indexes]
        lbls = [self.labels[k] for k in indexes]
        
        for idx, img_path in enumerate(urls):
            img = preprocessing.image.load_img(img_path, target_size=self.image_size)
            img_data = preprocessing.image.img_to_array(img)
            img_data = preprocess_input(img_data)
            lbl_data = lbls[idx]
            images[idx, :] = img_data
            labels[idx] = self.encode_label(lbl_data)
        
        return images, labels
    
    def on_epoch_end(self):
        self.indexes = np.arange(self.items_size)
        if self.shuffle:
            np.random.shuffle(self.indexes)
    
    def __len__(self):
        return int(np.floor(self.items_size / self.batch_size))
    
    def __getitem__(self, index):
        indexes = self.indexes[index * self.batch_size:(index+1) * self.batch_size]
        X, y = self.load_urls(indexes)
        return X, y


class Ploter:
    """
    A helper class to draw plots
    """
    @classmethod
    def ceildiv(cls, a, b):
        return -(-a // b)

    @classmethod
    def plots_from_files(cls, img_paths, figsize=(10,5), rows=1, titles=None, main_title=None):
        """Plots the images in a grid"""
        f = plt.figure(figsize=figsize)
        if main_title is not None: plt.suptitle(main_title, fontsize=10)
        for i in range(len(img_paths)):
            sp = f.add_subplot(rows, Ploter.ceildiv(len(img_paths), rows), i+1)
            sp.axis('Off')
            if titles is not None: sp.set_title(titles[i], fontsize=16)
            img = plt.imread(img_paths[i])
            plt.imshow(img)


class DataBunch():
    """
    An image data bunch 
    
    Attributes
    ----------
    classes_size : 
        The size of the word embeddings
    train_data, validation_data, test_data :
        The dataset generated by the class ImageGenerator
    """
    def __init__(self, classes_size : int, train_data : ImageGenerator, validation_data=None, test_data=None):
        self.cls_size = classes_size
        self.train_data = train_data
        self.validation_data = validation_data
        self.test_data = test_data
    
    def show_bunch(self, get_title, rows=3, figsize=(7, 6), **kwargs):
        """Show a bunch of images from the dataset"""
        imspaths = np.random.choice(self.train_data.items, 9)
        titles = [get_title(p) for p in imspaths]
        
        Ploter.plots_from_files(imspaths, figsize, rows, titles)
       
    @property
    def classes_size(self):
        return self.cls_size